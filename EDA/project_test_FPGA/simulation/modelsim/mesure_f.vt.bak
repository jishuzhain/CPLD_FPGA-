// Copyright (C) 1991-2009 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/30/2016 10:21:59"
                                                                                
// Verilog Test Bench template for design : mesure_f
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ps
module mesure_f_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg fx;
reg sel0;
reg sel1;
reg sel2;
reg sysclk;
// wires                                               
wire clk_25mhz;
wire clk_cnthz;
wire [7:0]  data_out;

// assign statements (if any)                          
mesure_f i1 (
// port map - connection between master ports and signals/registers   
	.clk_25mhz(clk_25mhz),
	.clk_cnthz(clk_cnthz),
	.data_out(data_out),
	.fx(fx),
	.sel0(sel0),
	.sel1(sel1),
	.sel2(sel2),
	.sysclk(sysclk)
);

parameter period = 20;
initial
begin
     sysclk = 0;
     forever
     #(period/2) sysclk = ~sysclk;
end  
                                                  
always                                                                  
begin
#500 fx = ~fx                                                                                                                                  
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

