C51 COMPILER V9.52.0.0   MAIN                                                              06/08/2016 21:50:28 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <AT89x52.h>
   2          #include <math.h>
   3          //#include "1602.h"
   4          #define uchar unsigned char
   5          #define uint unsigned int
   6          #define ulong unsigned long int
   7          #define CPLD_DATA P1
   8          sbit sel_num = P3^5;//选择接收哪一个数据
   9          sbit sel_num_low = P3^6; //选择两个数据的低16位
  10          sbit sel_num_high = P3^7;  //选择两个数据的高16位
  11          
  12          //sbit lcden = P2^2;
  13          //sbit lcdrs = P2^0;
  14          //sbit lcdrw = P2^1;
  15          sbit lcden = P2^7;
  16          sbit lcdrs = P2^5;
  17          sbit lcdrw = P2^6;
  18          
  19          void delay(uint x);
  20          void set_pos(uchar pos);
  21          void init_1602();
  22          void write_data(uchar date);
  23          void write_com(uchar com);
  24          
  25          void mov_data();
  26          void operation(); 
  27          void display();  
  28          ulong convert(ulong dat);
  29          //code 是写入rom的
  30          uchar  cnt_data[] = {0, 0, 0, 0, 0, 0, 0, 0}; //8个8位，待测频率计数值
  31          //uchar  cnt_data[] = {0x40, 0x78, 0x7D, 0x01, 0x40, 0x78, 0x7D, 0x01}; //8个8位，待测频率计数值
  32          uchar  display_data[] = "        .       "; //显示缓冲
  33          ulong fxcnt; //转换得到的值
  34          bit extern_int0_flag;  //中断标志位
  35          void InitMCU();
  36          void main()
  37          {
  38   1              delay(500); //延时等电源稳定
  39   1              InitMCU();
  40   1              init_1602();
  41   1              while(1)
  42   1              {
  43   2                      if(extern_int0_flag)
  44   2                      {
  45   3                              mov_data();  //接收数据
  46   3                              extern_int0_flag = 0; //清除中断标志
  47   3                      }
  48   2                      operation();   //数据处理
  49   2                      set_pos(0x40); //设置第二行显示位置
  50   2                      display();   //数据1602显示
  51   2                      delay(200);  //考虑加不加
  52   2              }
  53   1      }
  54          
  55          //*********************二进制变十进制*******************
C51 COMPILER V9.52.0.0   MAIN                                                              06/08/2016 21:50:28 PAGE 2   

  56          ulong convert(ulong dat)
  57          {
  58   1              //32位转换
  59   1              ulong sum = 0;
  60   1              char n;
  61   1              for(n = 31; n >= 0; n--)
  62   1              {
  63   2                      if((dat&0x80000000) == 0x80000000)
  64   2                      {
  65   3                              sum = sum + pow(2,n);  //2的几次方
  66   3                      }
  67   2                      else
  68   2                      {
  69   3                              
  70   3                      }
  71   2                      dat <<= 1;   //左移*2
  72   2              }
  73   1              return sum;
  74   1      }
  75          /****************初始化单片机************************/
  76          void InitMCU()
  77          {
  78   1              //修改ET0为EX0
  79   1              EX0 = 1; //开启外部中断0
  80   1              IT0 = 1; //触发方式
  81   1              EA = 1; //开总中断
  82   1              
  83   1      }
  84          
  85          /*****************外部中断函数************************/
  86          void extern_int0() interrupt 0
  87          {
  88   1              extern_int0_flag = 1;  //中断标志为1
  89   1      }
  90          
  91          /*****************接受CPLD数据****************************/
  92          void mov_data()
  93          {
  94   1              uchar a, b, c, d = 0;
  95   1              CPLD_DATA = 0xFF; //先拉高数据口
  96   1      //      sel_num = 0; //选择fxcnt
  97   1      //      sel_num_low = 0; //
  98   1      //      sel_num_high = 0; 
  99   1      //      delay(1);
 100   1      //      cnt_data[0] = CPLD_DATA;//低位为fxcnt,高位为fbasecnt
 101   1      //      
 102   1      //      sel_num = 0; //选择fxcnt
 103   1      //      sel_num_low = 0; //
 104   1      //      sel_num_high = 1; 
 105   1      //      delay(1);
 106   1      //      cnt_data[1] = CPLD_DATA;//低位为fxcnt,高位为fbasecnt
 107   1      //      
 108   1      //      sel_num = 0; //选择fxcnt
 109   1      //      sel_num_low = 1; //
 110   1      //      sel_num_high = 0; 
 111   1      //      delay(1);
 112   1      //      cnt_data[2] = CPLD_DATA;//低位为fxcnt,高位为fbasecnt
 113   1      //      
 114   1      //      sel_num = 0; //选择fxcnt
 115   1      //      sel_num_low = 1; //
 116   1      //      sel_num_high = 1; 
 117   1      //      delay(1);
C51 COMPILER V9.52.0.0   MAIN                                                              06/08/2016 21:50:28 PAGE 3   

 118   1      //      cnt_data[3] = CPLD_DATA;//低位为fxcnt,高位为fbasecnt
 119   1      //      
 120   1      //      sel_num = 1; //选择fxcnt
 121   1      //      sel_num_low = 0; //
 122   1      //      sel_num_high = 0; 
 123   1      //      delay(1);
 124   1      //      cnt_data[4] = CPLD_DATA;//低位为fxcnt,高位为fbasecnt
 125   1      //      
 126   1      //      sel_num = 1; //选择fxcnt
 127   1      //      sel_num_low = 0; //
 128   1      //      sel_num_high = 1; 
 129   1      //      delay(1);
 130   1      //      cnt_data[5] = CPLD_DATA;//低位为fxcnt,高位为fbasecnt
 131   1      //      
 132   1      //      sel_num = 1; //选择fxcnt
 133   1      //      sel_num_low = 1; //
 134   1      //      sel_num_high = 0; 
 135   1      //      delay(1);
 136   1      //      cnt_data[6] = CPLD_DATA;//低位为fxcnt,高位为fbasecnt
 137   1      //      
 138   1      //      sel_num = 1; //选择fxcnt
 139   1      //      sel_num_low = 1; //
 140   1      //      sel_num_high = 1; 
 141   1      //      delay(1);
 142   1      //      cnt_data[7] = CPLD_DATA;//低位为fxcnt,高位为fbasecnt
 143   1              for(a = 0; a < 2; a++)
 144   1                      for(b = 0; b < 2; b++)
 145   1                              for(c = 0; c < 2; c++)
 146   1                              {
 147   2              
 148   2                                              sel_num = a; //选择fxcnt
 149   2                                              sel_num_low = b; //
 150   2                                              sel_num_high = c;  //多次位操作，考虑总线
 151   2                                              delay(1);
 152   2                                              cnt_data[d++] = CPLD_DATA;//低位为fxcnt,高位为fbasecnt
 153   2                                      
 154   2                              }
 155   1              d = 0;  //清零下次计数
 156   1      }
 157          /*******************对接收的数据操作****************/
 158          void operation()
 159          {
 160   1              //调试并且修改这里
 161   1              ulong  F_X = 0;
 162   1              uint temp_s;
 163   1              float temp, fxcnt, fbasecnt, F_X_P;
 164   1      //      fbasecnt=cnt_data[7]<<24+cnt_data[6]<<16+cnt_data[5]<<8+cnt_data[4];
 165   1              fbasecnt = cnt_data[7]*16777216+cnt_data[6]*65536+cnt_data[5]*256+cnt_data[4];
 166   1              fbasecnt = convert(fbasecnt);  //转换十进制
 167   1              
 168   1              fxcnt = cnt_data[3]*16777216+cnt_data[2]*65536+cnt_data[1]*256+cnt_data[0];
 169   1              fxcnt = convert(fxcnt); //转换十进制
 170   1              
 171   1      //      F_X = fxcnt / fbasecnt * 25000000;  
 172   1              temp = fxcnt / fbasecnt;   //高频数太大，可能会溢出
 173   1              F_X = temp * 100000000;  //修改为系统时钟50M
 174   1              F_X_P = temp * 100000000 - F_X;
 175   1              display_data[9] = F_X_P * 10 + 48;
 176   1              temp_s = F_X_P * 100;
 177   1              display_data[10] = temp_s % 10 + 48;
 178   1              temp_s = F_X_P * 1000;
 179   1              display_data[11] = temp_s % 10 + 48;
C51 COMPILER V9.52.0.0   MAIN                                                              06/08/2016 21:50:28 PAGE 4   

 180   1              temp_s = F_X_P * 10000;
 181   1              display_data[12] = temp_s % 10 + 48;
 182   1              temp_s = F_X_P * 100000;
 183   1              display_data[13] = temp_s % 10 + 48;
 184   1              temp_s = F_X_P * 1000000;
 185   1              display_data[14] = temp_s % 10 + 48;
 186   1              temp_s = F_X_P * 10000000;
 187   1              display_data[15] = temp_s % 10 + 48;
 188   1              //未考虑小数点
 189   1              display_data[0] = F_X / 10000000 + 48;
 190   1              display_data[1] = F_X / 1000000 % 10 + 48;
 191   1              display_data[2] = F_X / 100000 % 10 + 48;
 192   1              display_data[3] = F_X / 10000 % 10 + 48;
 193   1              display_data[4] = F_X / 1000 % 10 + 48;
 194   1              display_data[5] = F_X / 100 % 10 + 48;
 195   1          display_data[6] = F_X / 10 % 10 + 48;
 196   1          display_data[7] = F_X % 10 + 48;
 197   1      }
 198          
 199          void display()
 200          {
 201   1              
 202   1              uchar i;
 203   1              //未考虑小数点
 204   1      //      uchar qw, bw, sw, w, q, b, s, g;
 205   1      //      qw = F_X / 10000000;
 206   1      //      bw = F_X / 1000000 % 10;
 207   1      //      sw = F_X / 100000 % 10;
 208   1      //      w = F_X / 10000 % 10;
 209   1      //      q = F_X / 1000 % 10;
 210   1      //      b = F_X / 100 % 10;
 211   1      //      s = F_X / 10 % 10;
 212   1      //      g = F_X % 10;
 213   1              for(i = 0; i < 16; i++)
 214   1              {
 215   2                      write_data(display_data[i]);
 216   2              }
 217   1              
 218   1      }
 219          
 220          /*ms延时函数*/
 221          void delay(uint x)
 222          {
 223   1              uint i,j;
 224   1              for(i = 0; i < x; i++)
 225   1              for(j = 0; j < 112; j++);
 226   1      }
 227          /*********************写命令子程序***********************/
 228          void write_com(uchar com)
 229          {
 230   1              lcdrs = 0;
 231   1              P0 = com;
 232   1              delay(5);
 233   1              lcden = 1;
 234   1              delay(5);
 235   1              lcden = 0;
 236   1      }
 237          /*********************写数据子程序*************************/
 238          void write_data(uchar date)
 239          {
 240   1              lcdrs = 1;
 241   1              P0 = date;
C51 COMPILER V9.52.0.0   MAIN                                                              06/08/2016 21:50:28 PAGE 5   

 242   1              delay(5);
 243   1              lcden = 1;
 244   1              delay(5);
 245   1              lcden = 0;
 246   1      }
 247          
 248          /********************初始化子程序**************************/
 249          void init_1602()
 250          {
 251   1              lcden = 0;
 252   1              lcdrw = 0;
 253   1              write_com(0x38);//设置16*2显示
 254   1              write_com(0x0c);//设置开显示，不显示光标（显示改0e）
 255   1              write_com(0x06);//写一个字符后地址指针加1
 256   1              write_com(0x01);//显示清0，数据指针清0
 257   1              write_com(0x80 + 0x1); //这里可能需要修改指针位置
 258   1              
 259   1      }
 260          /*******************设置指针位置程序************************/
 261          void set_pos(uchar pos)
 262          {
 263   1              write_com(pos | 0x80);
 264   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1229    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     29      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
